@page "/orders-hitory"
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@layout CommonLayout
@inject NavigationManager Navigation
@inject IOrderService OrderService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthStateProvider
<h3>Lịch sử mua hàng</h3>
@if (PagedOrders == null)
{
    <p>Đang tải...</p>
}
else if (!PagedOrders.Any())
{
    <p>Bạn chưa có đơn hàng nào.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Ngày đặt hàng</th>
                <th>Ngày yêu cầu</th>
                <th>Ngày giao hàng</th>
                <th>Tổng cộng</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in PagedOrders)
            {
                <tr @onclick="() => ViewOrderDetails(order.OrderId)" style="cursor: pointer;">
                    <td>@order.OrderDate.ToShortDateString()</td>
                    <td>@order.RequiredDate?.ToShortDateString()</td>
                    <td>@order.ShippedDate?.ToShortDateString()</td>

                    <td>@order.Freight?.ToString("N0") VND</td>
                </tr>
            }
        </tbody>
    </table>
    <!-- Pagination -->
    <nav>
        <ul class="pagination justify-content-center mt-3">
            <li class="page-item @(CurrentPage > 1 ? "" : "disabled")">
                <button class="page-link" @onclick="async () => await GoToPage(CurrentPage - 1)">Trước</button>
            </li>

            @if (TotalPages <= 7)
            {
                @for (int i = 1; i <= TotalPages; i++)
                {
                    int pageNumber = i;
                    <li class="page-item @(CurrentPage == i ? "active" : "")">
                        <button class="page-link" @onclick="async () => await GoToPage(pageNumber)">@pageNumber</button>
                    </li>
                }
            }
            else
            {
                <li class="page-item @(CurrentPage == 1 ? "active" : "")">
                    <button class="page-link" @onclick="async () => await GoToPage(1)">1</button>
                </li>
                @if (CurrentPage > 4)
                {
                    <li class="page-item disabled"><span class="page-link">...</span></li>
                }
                @for (int i = Math.Max(2, CurrentPage - 2); i <= Math.Min(TotalPages - 1, CurrentPage + 2); i++)
                {
                    int pageNumber = i;
                    <li class="page-item @(CurrentPage == i ? "active" : "")">
                        <button class="page-link" @onclick="async () => await GoToPage(pageNumber)">@pageNumber</button>
                    </li>
                }
                @if (CurrentPage < TotalPages - 3)
                {
                    <li class="page-item disabled"><span class="page-link">...</span></li>
                }
                <li class="page-item @(CurrentPage == TotalPages ? "active" : "")">
                    <button class="page-link" @onclick="async () => await GoToPage(TotalPages)">@TotalPages</button>
                </li>
            }
            <li class="page-item @(CurrentPage < TotalPages ? "" : "disabled")">
                <button class="page-link" @onclick="async () => await GoToPage(CurrentPage + 1)">Sau</button>
            </li>
        </ul>
    </nav>
}
@if (showDetails && SelectedOrderDetails != null)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Chi tiết đơn hàng</h5>
                    <button type="button" class="btn-close" @onclick="ClosePopup"></button>
                </div>
                <div class="modal-body">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Sản Phẩm</th>
                                <th>Số lượng</th>
                                <th>Giá</th>
                                <th>Giảm giá</th>
                                <th>Tổng</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var detail in SelectedOrderDetails)
                            {
                                <tr>
                                    <td>@detail.Product.ProductName</td>
                                    <td>@detail.Quantity</td>
                                    <td>@detail.UnitPrice.ToString("N0") VND</td>
                                    <td>@detail.Discount%</td>
                                    @{
                                        var subTotalPrice = detail.UnitPrice * (decimal)detail.Quantity;
                                        var subTotalPriceFormat = subTotalPrice.ToString("N0");
                                        var actualSubTotalPrice = detail.UnitPrice * detail.Quantity * ((decimal)(100 - detail.Discount) / 100);
                                        var actualSubTotalPriceFormat = actualSubTotalPrice.ToString("N0");
                                    }
                                    @* <td>@(detail.Quantity * detail.UnitPrice)</td> *@
                                    <td class="text-center">
                                        <div style="text-decoration: line-through">@(subTotalPriceFormat) VND</div>
                                        <div class="text-primary">@(actualSubTotalPriceFormat) VND</div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}
@code {
    private int MemberId = 0;
    private List<Order> Model = new List<Order>();
    private List<OrderDetail> SelectedOrderDetails = new List<OrderDetail>();
    private List<Order> PagedOrders = new List<Order>();
    //private List<Order> FilteredOrders = new List<Order>();
    private Order SelectedOrder;
    private bool showEditPopup = false;
    private bool showDetails = false;
    private int SelectedOrderId;
    private int CurrentPage = 1;
    private int PageSize = 5;
    private int TotalPages => (int)Math.Ceiling((double)Model.Count / PageSize);
    private bool CanGoPrevious => CurrentPage > 1;
    private bool CanGoNext => CurrentPage < TotalPages;

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentMemberIdAsync();
        await LoadOrdersAsync();


    }
    private async Task GoToPage(int pageNumber)
    {
        if (pageNumber < 1 || pageNumber > TotalPages) return;
        CurrentPage = pageNumber;
        UpdatePagedOrders();
    }
    private async Task GetCurrentMemberIdAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            // Lấy MemberId từ ClaimTypes.NameIdentifier
            var memberIdClaim = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            MemberId = int.Parse(memberIdClaim);
        }
        else
        {
            Navigation.NavigateTo("/login", forceLoad: true);
            return;
        }
    }
    private async Task LoadOrdersAsync()
    {
        Model = await OrderService.GetOrderByUserIdAsync(MemberId);
        UpdatePagedOrders();
        StateHasChanged();
    }
    private async void UpdatePagedOrders()
    {
        PagedOrders = Model.OrderByDescending(n => n.OrderDate)
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize)
            .ToList();
        StateHasChanged();
    }

    private async Task ViewOrderDetails(int orderId)
    {
        try
        {
            SelectedOrderId = orderId;
            var order = await OrderService.GetOrderByIdAsync(orderId);

            if (order != null && order.OrderDetails != null)
            {
                SelectedOrderDetails = order.OrderDetails.ToList();
                showDetails = true;
            }
            else
            {
                showDetails = true;
                SelectedOrderDetails = new List<OrderDetail>(); // No details found
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading order details: {ex.Message}");
        }

    }
    private void ClosePopup()
    {
        showDetails = false;
    }
}
