@page "/members/edit"
@using BusinessObject.Contracts
@using BusinessObject.Models
@inject NavigationManager NavigationManager
@inject IMemberService MemberService
<h3>UpdateProfile</h3>

@if (Member is null)
{
	<p><em>Loading...</em></p>
}
else
{
	<div class="row">
		<div class="col-md-4">
			<EditForm Model="Member" OnValidSubmit="UpdateMemebr" FormName="edit" Enhance>
				
				<div class="mb-3">
					<label for="email" class="form-label">Email:</label>
					<InputText id="email" @bind-Value="Member.Email" class="form-control" aria-required="true" />
					<ValidationMessage For="() => Member.Email" class="text-danger" />
				</div>
                <div class="mb-3">
                    <label for="email" class="form-label">Country:</label>
                    <InputText id="email" @bind-Value="Member.Country" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Member.Country" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">City:</label>
                    <InputText id="email" @bind-Value="Member.City" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Member.City" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">CompanyName:</label>
                    <InputText id="email" @bind-Value="Member.CompanyName" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Member.CompanyName" class="text-danger" />
                </div>
				<div class="mb-3">
					<label for="password" class="form-label">Password:</label>
					<InputText id="password" @bind-Value="Member.Password" class="form-control" aria-required="true" />
					<ValidationMessage For="() => Member.Password" class="text-danger" />
				</div>
				
				<button type="submit" class="btn btn-primary">Save</button>
			</EditForm>
		</div>
	</div>
}
@code {
    [SupplyParameterFromQuery]
    private int MemberId { get; set; }

    [SupplyParameterFromForm]
    private MemberDTO? Member { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Member = await MemberService.GetMember(MemberId);
        
    }

    private async Task UpdateMemebr()
    {
        try
        {
            await MemberService.UpdateProfile(Member);
            NavigationManager.NavigateTo("/products");
        }
        catch (Exception)
        {
            
            throw;
        }

    }
}
