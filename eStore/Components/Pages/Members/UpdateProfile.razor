@page "/update-profile"
@using BusinessObject.Contracts
@using BusinessObject.Models
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using eStore.Helpers
@inject NavigationManager NavigationManager
@inject IMemberService MemberService
@inject AuthenticationStateProvider AuthStateProvider
@inject SweetAlertService Swal;

<Microsoft.AspNetCore.Components.Authorization.AuthorizeView Roles="Member">
    <Authorized>
        <h3>Trang cá nhân</h3>
        @if (Member is null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="row justify-content-center">
                <div class="col-md-4">
                    <EditForm Model="Member" OnValidSubmit="UpdateMemeber" Context="editContext" Enhance>
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label for="email" class="form-label">Email:</label>
                            <InputText readonly id="email" @bind-Value="Member.Email" class="form-control" aria-required="true" />
                            <ValidationMessage For="() => Member.Email" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="email" class="form-label">Country:</label>
                            <InputText id="email" @bind-Value="Member.Country" class="form-control" aria-required="true" />
                            <ValidationMessage For="() => Member.Country" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="email" class="form-label">City:</label>
                            <InputText id="email" @bind-Value="Member.City" class="form-control" aria-required="true" />
                            <ValidationMessage For="() => Member.City" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="email" class="form-label">CompanyName:</label>
                            <InputText id="email" @bind-Value="Member.CompanyName" class="form-control" aria-required="true" />
                            <ValidationMessage For="() => Member.CompanyName" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="password" class="form-label">Password:</label>
                            <InputText id="password" @bind-Value="Member.Password" type="password" class="form-control" aria-required="true" />
                            <ValidationMessage For="() => Member.Password" class="text-danger" />
                        </div>

                        <button type="submit" class="btn btn-primary">Save</button>
                    </EditForm>
                </div>
            </div>

        }
    </Authorized>
</Microsoft.AspNetCore.Components.Authorization.AuthorizeView>

@code {
    private int MemberId { get; set; } 

    [SupplyParameterFromForm]
    private MemberDTO? Member { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated && user.FindFirst(c => c.Type == ClaimTypes.Role)?.Value == "Member")
        {
            var memberIdClaim = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            if (int.TryParse(memberIdClaim, out int memberId))
            {
                MemberId = memberId;
                Member = await MemberService.GetMember(MemberId);
            }
        } else
        {
            NavigationManager.NavigateTo("/login", forceLoad: true);
            return;
        }

    }

    private async Task UpdateMemeber()
    {
        try
        {
            await MemberService.UpdateProfile(Member);
            if (AuthStateProvider is CustomAuthStateProvider customAuthStateProvider)
            {
                await customAuthStateProvider.UpdateAuthenticationState(new UserSession
                    {
                        Id = Member.MemberId,
                        Email = Member.Email,
                        Role = "Member",
                        City = Member.City,
                        Country = Member.Country
                    });
            }
            var result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Thành công",
                    Text = $"Cập nhật thành công!",
                    Icon = SweetAlertIcon.Success,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Ok",
                });
            
                
            if (result.IsConfirmed)
            {
                NavigationManager.NavigateTo("/update-profile");
            }
        }
        catch (Exception)
        {
            
            throw;
        }

    }
}
