@page "/products/edit"
@using Microsoft.EntityFrameworkCore
@using DataAccess.Entities
@inject IDbContextFactory<DataAccess.Data.AppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Product</h2>
<hr />
@if (Product is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Product" OnValidSubmit="UpdateProduct" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Product.ProductId" value="@Product.ProductId" />
                <div class="mb-3">
                    <label for="categoryid" class="form-label">CategoryId:</label>
                    <InputNumber id="categoryid" @bind-Value="Product.CategoryId" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Product.CategoryId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="productname" class="form-label">ProductName:</label>
                    <InputText id="productname" @bind-Value="Product.ProductName" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Product.ProductName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="weight" class="form-label">Weight:</label>
                    <InputText id="weight" @bind-Value="Product.Weight" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Product.Weight" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="unitprice" class="form-label">UnitPrice:</label>
                    <InputNumber id="unitprice" @bind-Value="Product.UnitPrice" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Product.UnitPrice" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="unitsinstock" class="form-label">UnitsInStock:</label>
                    <InputNumber id="unitsinstock" @bind-Value="Product.UnitsInStock" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Product.UnitsInStock" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/products">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int ProductId { get; set; }

    [SupplyParameterFromForm]
    private Product? Product { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Product ??= await context.Products.FirstOrDefaultAsync(m => m.ProductId == ProductId);

        if (Product is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateProduct()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Product!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ProductExists(Product!.ProductId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/products");
    }

    private bool ProductExists(int productid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Products.Any(e => e.ProductId == productid);
    }
}
