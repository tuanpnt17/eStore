@page "/admin/categoriesmanagement"
@using BusinessObject.Models
@using eStore.Hubs
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@layout MainLayout 
@inject NavigationManager Navigation
@inject ICategoryService CategoryService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@inherits LayoutComponentBase
@inject IHubContext<CategoryHub> CategoryHubContext
<h3>Categories Manager</h3>
<div class="mb-3 d-flex">
    <input type="text" class="form-control me-2" placeholder="Search by Name or Description..." @bind="SearchTerm" />
    <button class="btn btn-primary" @onclick="SearchCategories">Search</button>
</div>
<!-- Add New Category Button -->
<button class="btn btn-success mb-3" @onclick="ShowAddCategoryPopup">Add New Category</button>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Category ID</th>
            <th>Category Name</th>
            <th>Description</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var category in Categories)
        {
            <tr>
                <td>@category.CategoryId</td>
                <td>@category.CategoryName</td>
                <td>@category.CategoryDescription</td>
                <td>
                    <button class="btn btn-primary btn-sm" @onclick="() => EditCategory(category)">Edit</button>
                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteCategory(category.CategoryId)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>
<!-- Pagination -->
<div class="mt-3">
    <button class="btn btn-secondary me-2" @onclick="PreviousPage" disabled="@(CurrentPage == 1)">Previous</button>
    <span>Page @CurrentPage of @TotalPages</span>
    <button class="btn btn-secondary ms-2" @onclick="NextPage" disabled="@(CurrentPage == TotalPages)">Next</button>
</div>
@if (showPopup && SelectedCategory != null)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEdit ? "Edit" : "Add") Category</h5>
                    <button type="button" class="btn-close" @onclick="ClosePopup"></button>
                </div>
                <div class="modal-body">
                    <label>Category Name:</label>
                    <input type="text" class="form-control" @bind-value="SelectedCategory.CategoryName" />
                    <label>Description:</label>
                    <textarea class="form-control" @bind="SelectedCategory.CategoryDescription"></textarea>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="ClosePopup">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveCategory">Save</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Category> Categories = new List<Category>();
    private List<Category> FilteredCategories = new List<Category>(); // Kết quả sau tìm kiếm
    private List<Category> PagedCategories = new List<Category>();
    private Category SelectedCategory;
    private bool showPopup = false;
    private bool isEdit = false;
    private string SearchTerm = ""; 
    private int CurrentPage = 1;
    private int PageSize = 3; 
    private int TotalPages => (int)Math.Ceiling((double)FilteredCategories.Count / PageSize); 
    private HubConnection hubConnection;
    protected override async Task OnInitializedAsync()
    {
        await LoadCategoriesAsync();
        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri(CategoryHub.HubUrl))
                .WithAutomaticReconnect()
                .Build();
            hubConnection.On("ReceiveCategoryUpdate", async () =>
            {
                await InvokeAsync(async () => await LoadCategoriesAsync());             
            });

            await hubConnection.StartAsync();
            Console.WriteLine("SignalR connected successfully!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"SignalR connection failed: {ex.Message}");
        }
    }

    private async Task LoadCategoriesAsync()
    {

        Categories = await CategoryService.GetAllCategoriesAsync();
        SearchCategories();
        StateHasChanged();
    }
    // Tìm kiếm danh mục theo tên hoặc mô tả
    private async void SearchCategories()
    {
        Categories = await CategoryService.GetAllCategoriesAsync();
        Categories = Categories
        .Where(c => c.CategoryName.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
                    c.CategoryDescription.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase))
        .ToList();
        CurrentPage = 1; // Reset về trang đầu tiên
        UpdatePagedCategories();
    }
    private void UpdatePagedCategories()
    {
        PagedCategories = FilteredCategories
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize)
            .ToList();
    }

    private void PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
            UpdatePagedCategories();
        }
    }

    private void NextPage()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
            UpdatePagedCategories();
        }
    }
    private void ShowAddCategoryPopup()
    {
        SelectedCategory = new Category() { CategoryName = ""};
        isEdit = false;
        showPopup = true;
    }
    private void EditCategory(Category category)
    {
        if (category == null) return;
        SelectedCategory = category;
        isEdit = true;
        showPopup = true;
    }

    private void ClosePopup()
    {
        showPopup = false;
    }

    private async Task SaveCategory()
    {
        if (SelectedCategory == null || string.IsNullOrWhiteSpace(SelectedCategory.CategoryName))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Category Name is required.");
            return;
        }

        try
        {
            if (isEdit)
            {
                await CategoryService.UpdateCategoryAsync(SelectedCategory);            
               
                    await CategoryHubContext.Clients.All.SendAsync("ReceiveCategoryUpdate");
            }
            else
            {
                await CategoryService.CreateCategoryAsync(new CategoryDTO
                    {
                        CategoryName = SelectedCategory.CategoryName,
                        CategoryDescription = SelectedCategory.CategoryDescription ?? ""
                    });
                if (hubConnection?.State == HubConnectionState.Connected)
                    await CategoryHubContext.Clients.All.SendAsync("ReceiveCategoryUpdate");
                    
            }
            showPopup = false;
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Failed to save category: {ex.Message}");
        }
    }

    private async Task DeleteCategory(int categoryId)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this category?");
        if (!confirm) return;

        try
        {
            // Check if the category is in use by products
            var productsInCategory = await CategoryService.IsCategoryInUseAsync(categoryId); // Assumed method
            if (productsInCategory)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Cannot delete this category because it is associated with one or more products.");
                return;
            }

            // Proceed with deletion
            await CategoryService.DeleteCategoryAsync(categoryId);

                await CategoryHubContext.Clients.All.SendAsync("ReceiveCategoryUpdate");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Failed to delete category: {ex.Message}");
        }
    }
}
