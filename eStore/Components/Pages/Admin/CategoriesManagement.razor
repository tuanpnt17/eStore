@page "/admin/categories"
@using BusinessObject.Models
@using eStore.Hubs
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@layout MainLayout
@inject NavigationManager Navigation
@inject ICategoryService CategoryService
@inject IJSRuntime JSRuntime
@inject ILogger<CategoriesManagement> Logger
@rendermode InteractiveServer
@inherits LayoutComponentBase
@inject IHubContext<CategoryHub> CategoryHubContext
<h3>Quản lý danh mục</h3>
<style>
    .table-striped tbody tr.selected-row {
    background-color: rgba(0, 0, 255, 0.3) !important; /* Blue background with 30% opacity */
    /* Removed pointer-events: none since we want the row to remain interactive */
    }

</style>
<div class="mb-3 d-flex">
    <input type="text" class="form-control me-2" placeholder="Tìm kiếm theo Tên hoặc Mô tả..." @bind="SearchTerm" />
    <button class="btn btn-primary" @onclick="SearchCategories">Search</button>
</div>
<!-- Add New Category Button -->
<button class="btn btn-success mb-3" @onclick="ShowAddCategoryPopup">Thêm danh mục mới</button>

<table class="table table-striped">
    <thead>
        <tr>
            <th>ID</th>
            <th>Tên danh mục</th>
            <th>Mô tả</th>
            <th>Hành động</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var category in PagedCategories)
        {
            <tr class="@(category.CategoryId == editingCategoryId ? "selected-row" : "")">
                <td>@category.CategoryId</td>
                <td>@category.CategoryName</td>
                <td>@category.CategoryDescription</td>
                <td>
                    <button class="btn btn-primary btn-sm" @onclick="() => EditCategory(category.CategoryId)">Chỉnh sửa</button>
                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteCategory(category.CategoryId)">Xoá</button>
                </td>
            </tr>
        }
    </tbody>
</table>
<!-- Pagination -->
<nav>
    <ul class="pagination justify-content-center mt-3">
        <li class="page-item @(CurrentPage > 1 ? "" : "disabled")">
            <button class="page-link" @onclick="async () => await GoToPage(CurrentPage - 1)">Trước</button>
        </li>

        @if (TotalPages <= 7)
        {
            @for (int i = 1; i <= TotalPages; i++)
            {
                int pageNumber = i;
                <li class="page-item @(CurrentPage == i ? "active" : "")">
                    <button class="page-link" @onclick="async () => await GoToPage(pageNumber)">@pageNumber</button>
                </li>
            }
        }
        else
        {
            <li class="page-item @(CurrentPage == 1 ? "active" : "")">
                <button class="page-link" @onclick="async () => await GoToPage(1)">1</button>
            </li>
            @if (CurrentPage > 4)
            {
                <li class="page-item disabled"><span class="page-link">...</span></li>
            }
            @for (int i = Math.Max(2, CurrentPage - 2); i <= Math.Min(TotalPages - 1, CurrentPage + 2); i++)
            {
                int pageNumber = i;
                <li class="page-item @(CurrentPage == i ? "active" : "")">
                    <button class="page-link" @onclick="async () => await GoToPage(pageNumber)">@pageNumber</button>
                </li>
            }
            @if (CurrentPage < TotalPages - 3)
            {
                <li class="page-item disabled"><span class="page-link">...</span></li>
            }
            <li class="page-item @(CurrentPage == TotalPages ? "active" : "")">
                <button class="page-link" @onclick="async () => await GoToPage(TotalPages)">@TotalPages</button>
            </li>
        }
        <li class="page-item @(CurrentPage < TotalPages ? "" : "disabled")">
            <button class="page-link" @onclick="async () => await GoToPage(CurrentPage + 1)">Sau</button>
        </li>
    </ul>
</nav>
@if (showPopup && SelectedCategory != null)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEdit ? "Chỉnh sửa" : "Tạo") danh mục</h5>
                    <button type="button" class="close" aria-label="Close" @onclick="ClosePopup">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label>Category Name:</label>
                        <input type="text" class="form-control" @bind-value="SelectedCategory.CategoryName" />
                        @if (!string.IsNullOrEmpty(CategoryNameError))
                        {
                            <small class="text-danger">@CategoryNameError</small>
                        }
                    </div>
                    <div class="mb-3">
                        <label>Description:</label>
                        <textarea class="form-control" @bind="SelectedCategory.CategoryDescription"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="ClosePopup">Huỷ</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveCategory">Lưu</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<Category> Categories = new List<Category>();
    private List<Category> FilteredCategories = new List<Category>(); // Kết quả sau tìm kiếm
    private List<Category> PagedCategories = new List<Category>();
    private Category SelectedCategory;
    private bool showPopup = false;
    private bool isEdit = false;
    private string SearchTerm = "";
    private string originalCategoryName;
    private string? CategoryNameError;
    private int? editingCategoryId = null;
    private int CurrentPage = 1;
    private int PageSize = 5;
    private int TotalPages => (int)Math.Ceiling((double)FilteredCategories.Count / PageSize);
    private HubConnection hubConnection;
    protected override async Task OnInitializedAsync()
    {
        await LoadCategoriesAsync();
        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri(CategoryHub.HubUrl))
                .WithAutomaticReconnect()
                .Build();
            hubConnection.On("ReceiveCategoryUpdate", async () =>
            {
                Logger.LogInformation("Receive Category Update success fully");
                await InvokeAsync(async () =>
                {
                    await LoadCategoriesAsync();
                    UpdatePagedCategories();
                });
                StateHasChanged();
            });

            await hubConnection.StartAsync();
            Console.WriteLine("SignalR connected successfully!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"SignalR connection failed: {ex.Message}");
        }
    }

    private async Task GoToPage(int pageNumber)
    {
        if (pageNumber < 1 || pageNumber > TotalPages) return;
        CurrentPage = pageNumber;
        UpdatePagedCategories();
    }

    private async Task LoadCategoriesAsync()
    {

        Categories = await CategoryService.GetAllCategoriesAsync();
        SearchCategories();
        StateHasChanged();
    }
    // Tìm kiếm danh mục theo tên hoặc mô tả
    private async void SearchCategories()
    {
        //FilteredCategories = await CategoryService.GetAllCategoriesAsync();
        FilteredCategories = Categories
        .Where(c => c.CategoryName.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
                    c.CategoryDescription.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase))
        .ToList();
        CurrentPage = 1; // Reset về trang đầu tiên
        UpdatePagedCategories();
    }

    private void UpdatePagedCategories()
    {
        PagedCategories = FilteredCategories.OrderByDescending(n => n.CategoryId)
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize)
            .ToList();
        StateHasChanged();
    }
    private void ShowAddCategoryPopup()
    {
        SelectedCategory = new Category() { CategoryName = "" };
        originalCategoryName = "";
        isEdit = false;
        editingCategoryId = null;
        showPopup = true;
    }
    private async Task EditCategory(int categoryId)
    {
        SelectedCategory = await CategoryService.GetCategoryByIdAsync(categoryId);
        originalCategoryName = SelectedCategory.CategoryName;
        isEdit = true;
        showPopup = true;
        editingCategoryId = SelectedCategory.CategoryId;
        CategoryNameError = "";
        StateHasChanged();
    }

    private void ClosePopup()
    {
        showPopup = false;
        CategoryNameError = "";
        editingCategoryId = null;
        StateHasChanged();
    }
    private async Task SaveCategory()
    {
        if (SelectedCategory == null || string.IsNullOrWhiteSpace(SelectedCategory.CategoryName))
        {
            CategoryNameError = "Tên danh mục không được để trống.";
            return;
        }
        bool isDuplicate = false;
        if (isEdit)
        {
            // Khi chỉnh sửa, kiểm tra các danh mục khác (ngoại trừ danh mục hiện tại)
            isDuplicate = Categories.Any(c => c.CategoryId != SelectedCategory.CategoryId &&
                                             c.CategoryName.Equals(SelectedCategory.CategoryName, StringComparison.OrdinalIgnoreCase));
        }
        else
        {
            // Khi tạo mới, kiểm tra toàn bộ danh sách
            isDuplicate = Categories.Any(c => c.CategoryName.Equals(SelectedCategory.CategoryName, StringComparison.OrdinalIgnoreCase));
        }

        if (isDuplicate)
        {
            CategoryNameError = "Tên danh mục đã tồn tại. Vui lòng chọn tên khác.";
            if (isEdit)
            {
                SelectedCategory.CategoryName = originalCategoryName;
            }

            return;
        }
        else CategoryNameError = "";
        try
        {
            if (isEdit)
            {
                await CategoryService.UpdateCategoryAsync(SelectedCategory);
                // await CategoryHubContext.Clients.All.SendAsync("ReceiveCategoryUpdate");
            }
            else
            {
                await CategoryService.CreateCategoryAsync(new CategoryDTO
                    {
                        CategoryName = SelectedCategory.CategoryName,
                        CategoryDescription = SelectedCategory.CategoryDescription ?? ""
                    });
                // await CategoryHubContext.Clients.All.SendAsync("ReceiveCategoryUpdate");

            }
            await CategoryHubContext.Clients.All.SendAsync("ReceiveCategoryUpdate");
            editingCategoryId = null;
            showPopup = false;
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Failed to save category: {ex.Message}");
        }
    }

    private async Task DeleteCategory(int categoryId)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc chắn muốn xóa danh mục này không?");
        if (!confirm) return;

        try
        {
            // Check if the category is in use by products
            var productsInCategory = await CategoryService.IsCategoryInUseAsync(categoryId); // Assumed method
            if (productsInCategory)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Không thể xóa danh mục này vì nó liên quan đến một hoặc nhiều sản phẩm.");
                return;
            }

            // Proceed with deletion
            await CategoryService.DeleteCategoryAsync(categoryId);

            await CategoryHubContext.Clients.All.SendAsync("ReceiveCategoryUpdate");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Không xóa được danh mục: {ex.Message}");
        }
    }
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
