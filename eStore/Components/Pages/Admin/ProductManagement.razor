@page "/admin/products"
@using AutoMapper
@using Microsoft.AspNetCore.Components.QuickGrid
@using BusinessObject.Contracts
@using BusinessObject.Models.Product
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.SignalR
@using BusinessObject.Hubs
@layout MainLayout
@inject IHubContext<ProductHub> HubContext
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject IMapper Mapper
@inject ILogger<Index> Logger
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@implements IAsyncDisposable

<PageTitle>Sản phẩm</PageTitle>

<h1>Danh sách sản phẩm</h1>

<p>
    <button class="btn btn-success" @onclick="() => showCreatePopup = true">Tạo mới</button>
</p>

<div class="row mb-3">
    <div class="col-md-6">
        <input type="text" @bind="searchTerm" @oninput="HandleSearchInput" placeholder="Tìm kiếm sản phẩm..." class="form-control" />
    </div>
    <div class="col-md-6">
        <label for="priceSlider">Giá tối đa: @maxPrice.ToString("N0")</label>
        <input type="range" id="priceSlider" min="0" max="40000000" step="1000" @bind="maxPrice" @oninput="HandlePriceInput" class="form-range" />
    </div>
</div>
<button @onclick="async () => { currentPage = 1; await SearchProducts(); }" class="btn btn-primary">Tìm kiếm</button>

@if (products is not null && products.Count > 0)
{
    <QuickGrid Class="table" Items="products.AsQueryable()" @bind-PageSize="pageSize">
        <PropertyColumn Property="product => product.Category.CategoryName" Title="Danh mục" />
        <PropertyColumn Property="product => product.ProductName" Title="Tên sản phẩm" />
        <PropertyColumn Property="product => product.Weight" Title="Trọng lượng" />
        <PropertyColumn Property="product => product.UnitPrice" Title="Giá (VNĐ)" />
        <PropertyColumn Property="product => product.UnitsInStock" Title="Tồn kho" />

        <TemplateColumn Context="product" Align="Align.Left">
            <HeaderTemplate>
                Hành động
            </HeaderTemplate>
            <ChildContent>
                <button class="btn btn-warning" @onclick="() => OpenUpdateForm(product.ProductId)">Sửa</button> |
                <button class="btn btn-secondary" @onclick="() => OpenDetailForm(product.ProductId)">Chi tiết</button> |
                <button class="btn btn-danger" @onclick="() => OpenDeleteForm(product.ProductId)">Xóa</button>
            </ChildContent>
        </TemplateColumn>
    </QuickGrid>

    <nav>
        <ul class="pagination justify-content-center mt-3">
            <li class="page-item @(HasPreviousPage ? "" : "disabled")">
                <button class="page-link" @onclick="async () => await GoToPage(currentPage - 1)">Trước</button>
            </li>

            @if (totalPages <= 7)
            {
                @for (int i = 1; i <= totalPages; i++)
                {
                    int pageNumber = i;
                    <li class="page-item @(currentPage == i ? "active" : "")">
                        <button class="page-link" @onclick="async () => await GoToPage(pageNumber)">@pageNumber</button>
                    </li>
                }
            }
            else
            {
                <li class="page-item @(currentPage == 1 ? "active" : "")">
                    <button class="page-link" @onclick="async () => await GoToPage(1)">1</button>
                </li>

                @if (currentPage > 4)
                {
                    <li class="page-item disabled"><span class="page-link">...</span></li>
                }

                @for (int i = Math.Max(2, currentPage - 2); i <= Math.Min(totalPages - 1, currentPage + 2); i++)
                {
                    int pageNumber = i;
                    <li class="page-item @(currentPage == i ? "active" : "")">
                        <button class="page-link" @onclick="async () => await GoToPage(pageNumber)">@pageNumber</button>
                    </li>
                }

                @if (currentPage < totalPages - 3)
                {
                    <li class="page-item disabled"><span class="page-link">...</span></li>
                }

                <li class="page-item @(currentPage == totalPages ? "active" : "")">
                    <button class="page-link" @onclick="async () => await GoToPage(totalPages)">@totalPages</button>
                </li>
            }

            <li class="page-item @(HasNextPage ? "" : "disabled")">
                <button class="page-link" @onclick="async () => await GoToPage(currentPage + 1)">Sau</button>
            </li>
        </ul>
    </nav>
}
else
{
    <p>Không tìm thấy sản phẩm.</p>
}

@if (showCreatePopup)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Tạo sản phẩm</h5>
                    <button type="button" class="close" aria-label="Close" @onclick="() => showCreatePopup = false">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm Model="createProduct" OnValidSubmit="HandleCreateSubmit">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label>Danh mục</label>
                            <select class="form-control" @bind="createProduct.CategoryId">
                                <option value="0">-- Chọn danh mục --</option>
                                @foreach (var category in categories)
                                {
                                    <option value="@category.CategoryId">@category.CategoryName</option>
                                }
                            </select>
                        </div>
                        <div class="mb-3">
                            <label>Tên sản phẩm</label>
                            <input type="text" class="form-control" @bind="createProduct.ProductName" />
                            <ValidationMessage For="@(() => createProduct.ProductName)" />
                        </div>

                        <div class="mb-3">
                            <label>Trọng lượng</label>
                            <input type="text" class="form-control" @bind="createProduct.Weight" />
                            <ValidationMessage For="@(() => createProduct.Weight)" />
                        </div>

                        <div class="mb-3">
                            <label>Giá (VNĐ)</label>
                            <input type="number" class="form-control" @bind="createProduct.UnitPrice" />
                            <ValidationMessage For="@(() => createProduct.UnitPrice)" />
                        </div>

                        <div class="mb-3">
                            <label>Tồn kho</label>
                            <input type="number" class="form-control" @bind="createProduct.UnitsInStock" />
                            <ValidationMessage For="@(() => createProduct.UnitsInStock)" />
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary">Tạo</button>
                            <button type="button" class="btn btn-secondary" @onclick="() => showCreatePopup = false">Hủy</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (showUpdatePopup && updateProduct != null)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Sửa sản phẩm</h5>
                    <button type="button" class="close" aria-label="Close" @onclick="() => showUpdatePopup = false">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm Model="updateProduct" OnValidSubmit="HandleUpdateSubmit">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label>Danh mục</label>
                            <select class="form-control" @bind="updateProduct.CategoryId">
                                <option value="0">-- Chọn danh mục --</option>
                                @foreach (var category in categories)
                                {
                                    <option value="@category.CategoryId">@category.CategoryName</option>
                                }
                            </select>
                        </div>

                        <div class="mb-3">
                            <label>Tên sản phẩm</label>
                            <input type="text" class="form-control" @bind="updateProduct.ProductName" />
                            <ValidationMessage For="@(() => updateProduct.ProductName)" />
                        </div>

                        <div class="mb-3">
                            <label>Trọng lượng</label>
                            <input type="text" class="form-control" @bind="updateProduct.Weight" />
                            <ValidationMessage For="@(() => updateProduct.Weight)" />
                        </div>

                        <div class="mb-3">
                            <label>Giá (VNĐ)</label>
                            <input type="number" class="form-control" @bind="updateProduct.UnitPrice" />
                            <ValidationMessage For="@(() => updateProduct.UnitPrice)" />
                        </div>

                        <div class="mb-3">
                            <label>Tồn kho</label>
                            <input type="number" class="form-control" @bind="updateProduct.UnitsInStock" />
                            <ValidationMessage For="@(() => updateProduct.UnitsInStock)" />
                        </div>

                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary">Lưu thay đổi</button>
                            <button type="button" class="btn btn-secondary" @onclick="() => showUpdatePopup = false">Hủy</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (showDetailPopup)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Chi tiết sản phẩm</h5>
                    <button type="button" class="close" aria-label="Close" @onclick="() => showDetailPopup = false">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">
                    <table class="table">
                        <tr>
                            <th>Danh mục</th>
                            <td>@detailProduct.Category.CategoryName</td>
                        </tr>
                        <tr>
                            <th>Tên sản phẩm</th>
                            <td>@detailProduct.ProductName</td>
                        </tr>
                        <tr>
                            <th>Trọng lượng</th>
                            <td>@detailProduct.Weight</td>
                        </tr>
                        <tr>
                            <th>Giá (VNĐ)</th>
                            <td>@detailProduct.UnitPrice</td>
                        </tr>
                        <tr>
                            <th>Tồn kho</th>
                            <td>@detailProduct.UnitsInStock</td>
                        </tr>
                    </table>
                    <button class="btn btn-secondary" @onclick="() => showDetailPopup = false">Quay lại danh sách</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (showDeletePopup && deleteProduct != null)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Xóa sản phẩm</h5>
                    <button type="button" class="close" aria-label="Close" @onclick="() => showDeletePopup = false">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Bạn có chắc chắn muốn xóa sản phẩm này không?</p>
                    <table class="table">
                        <tr>
                            <th>Danh mục</th>
                            <td>@deleteProduct.Category.CategoryName</td>
                        </tr>
                        <tr>
                            <th>Tên sản phẩm</th>
                            <td>@deleteProduct.ProductName</td>
                        </tr>
                        <tr>
                            <th>Trọng lượng</th>
                            <td>@deleteProduct.Weight</td>
                        </tr>
                        <tr>
                            <th>Giá (VNĐ)</th>
                            <td>@deleteProduct.UnitPrice</td>
                        </tr>
                        <tr>
                            <th>Tồn kho</th>
                            <td>@deleteProduct.UnitsInStock</td>
                        </tr>
                    </table>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" @onclick="HandleDeleteSubmit">Xóa</button>
                    <button class="btn btn-secondary" @onclick="() => showDeletePopup = false">Hủy</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private HubConnection? hubConnection;
    private bool _isDisposing = false;
    private List<ProductViewDTO>? products = new();
    private decimal maxPrice = 40000000;
    private string searchTerm = "";
    private int currentPage = 1;
    private int pageSize = 5;
    private int totalPages = 1;
    private bool isSearching = false;
    private string? _hubUrl;
    private readonly string ProductHubUrl = "/producthub";
    private List<Category> categories = new();

    private CreateProductDTO createProduct = new()
        {
            CategoryId = 0,
            ProductName = string.Empty,
            Weight = string.Empty
        };
    private UpdateProductDTO updateProduct;
    private ProductViewDTO detailProduct;
    private ProductViewDTO deleteProduct;

    private bool showCreatePopup = false;
    private bool showUpdatePopup = false;
    private bool showDetailPopup = false;
    private bool showDeletePopup = false;
    private System.Timers.Timer? searchDebounceTimer;
    private System.Timers.Timer? priceDebounceTimer;

    protected override void OnInitialized()
    {
        Logger.LogInformation("Attempting to connect to SignalR at: {Url}", NavigationManager.ToAbsoluteUri("/producthub"));
        string baseUrl = NavigationManager.BaseUri;
        _hubUrl = baseUrl.TrimEnd('/') + ProductHubUrl;
        hubConnection = new HubConnectionBuilder()
            .WithUrl(_hubUrl)
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On("ReceiveProductUpdate", async () =>
        {
            Logger.LogInformation("Received product update from SignalR");
            await InvokeAsync(async () => await LoadData());
        });

        hubConnection.Closed += async (error) =>
        {
            Logger.LogError(error, "SignalR connection closed");
            if (_isDisposing)
            {
                Logger.LogInformation("Skipping reconnection because component is disposing");
                return;
            }
            await Task.Delay(1000);
            if (hubConnection.State != HubConnectionState.Disconnected)
            {
                Logger.LogWarning("HubConnection is not in a reconnectable state: {State}", hubConnection.State);
                return;
            }
            try
            {
                await hubConnection.StartAsync();
                Logger.LogInformation("SignalR reconnected successfully");
            }
            catch (ObjectDisposedException ex)
            {
                Logger.LogWarning(ex, "Cannot reconnect because HubConnection is disposed");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to reconnect SignalR");
            }
        };

        hubConnection.Reconnecting += (error) =>
        {
            Logger.LogWarning("Attempting to reconnect...");
            return Task.CompletedTask;
        };

        hubConnection.Reconnected += (connectionId) =>
        {
            Logger.LogInformation("Reconnected to SignalR with connection ID: {0}", connectionId);
            return Task.CompletedTask;
        };

        searchDebounceTimer = new System.Timers.Timer(300);
        searchDebounceTimer.Elapsed += async (sender, e) =>
        {
            searchDebounceTimer.Stop();
            await InvokeAsync(async () =>
            {
                if (string.IsNullOrWhiteSpace(searchTerm) && maxPrice == 40000000)
                {
                    await LoadProducts();
                }
                else
                {
                    await SearchProducts();
                }
            });
        };
        searchDebounceTimer.AutoReset = false;

        priceDebounceTimer = new System.Timers.Timer(300);
        priceDebounceTimer.Elapsed += async (sender, e) =>
        {
            priceDebounceTimer.Stop();
            await InvokeAsync(async () =>
            {
                if (string.IsNullOrWhiteSpace(searchTerm) && maxPrice == 40000000)
                {
                    await LoadProducts();
                }
                else
                {
                    await SearchProducts();
                }
            });
        };
        priceDebounceTimer.AutoReset = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await hubConnection.StartAsync();
                Logger.LogInformation("SignalR connection started");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to start SignalR connection");
            }
            await LoadProducts();
        }
    }

    private async Task LoadProducts()
    {
        var pagedResult = await ProductService.GetPagedProductsAsync(currentPage, pageSize);
        products = pagedResult.Items.ToList();
        totalPages = pagedResult.TotalPages;
        isSearching = false;
        categories = await CategoryService.GetAllCategoriesAsync();
        StateHasChanged();
    }

    private async Task SearchProducts()
    {
        var pagedResult = await ProductService.SearchProductsAsync(searchTerm, maxPrice, currentPage, pageSize);
        if (pagedResult.Items.Any())
        {
            products = pagedResult.Items.ToList();
            totalPages = pagedResult.TotalPages;
        }
        else
        {
            products = new List<ProductViewDTO>();
            totalPages = 1;
        }
        isSearching = true;
        StateHasChanged();
    }

    private bool DoesProductMatchSearch(ProductViewDTO product)
    {
        if (string.IsNullOrWhiteSpace(searchTerm) && maxPrice == 40000000)
        {
            return true;
        }

        var searchTermLower = searchTerm.ToLower();
        bool matchesSearchTerm = string.IsNullOrWhiteSpace(searchTerm) ||
            product.ProductName.ToLower().Contains(searchTermLower) ||
            (product.Category != null && product.Category.CategoryName.ToLower().Contains(searchTermLower));
        bool matchesPrice = product.UnitPrice <= maxPrice;

        return matchesSearchTerm && matchesPrice;
    }

    private async Task GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        if (isSearching)
            await SearchProducts();
        else
            await LoadProducts();
    }

    private bool HasPreviousPage => currentPage > 1;
    private bool HasNextPage => currentPage < totalPages;

    public async ValueTask DisposeAsync()
    {
        _isDisposing = true;
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
            Logger.LogInformation("SignalR connection disposed");
        }
        searchDebounceTimer?.Dispose();
        priceDebounceTimer?.Dispose();
    }

    private async Task HandleCreateSubmit()
    {
        await ProductService.AddProductAsync(createProduct);
        await HubContext.Clients.All.SendAsync("ReceiveProductUpdate");
        showCreatePopup = false;
        createProduct = new()
            {
                CategoryId = 0,
                ProductName = string.Empty,
                Weight = string.Empty
            };
        await LoadData();
    }

    private async Task OpenUpdateForm(int Id)
    {
        var existingProduct = await ProductService.GetProductByIdAsync(Id);
        if (existingProduct != null)
        {
            updateProduct = Mapper.Map<UpdateProductDTO>(existingProduct);
        }
        showUpdatePopup = true;
    }

    private async Task HandleUpdateSubmit()
    {
        await ProductService.UpdateProductAsync(updateProduct);
        await HubContext.Clients.All.SendAsync("ReceiveProductUpdate");
        showUpdatePopup = false;
        updateProduct = null;
        await LoadData();
    }

    private async Task OpenDetailForm(int Id)
    {
        var existingProduct = await ProductService.GetProductByIdAsync(Id);
        if (existingProduct != null)
        {
            detailProduct = Mapper.Map<ProductViewDTO>(existingProduct);
        }
        showDetailPopup = true;
    }

    private async Task OpenDeleteForm(int Id)
    {
        var existingProduct = await ProductService.GetProductByIdAsync(Id);
        if (existingProduct != null)
        {
            deleteProduct = Mapper.Map<ProductViewDTO>(existingProduct);
        }
        showDeletePopup = true;
    }

    private async Task HandleDeleteSubmit()
    {
        if (deleteProduct != null)
        {
            await ProductService.DeleteProductAsync(deleteProduct.ProductId);
            await HubContext.Clients.All.SendAsync("ReceiveProductUpdate");
            showDeletePopup = false;
            deleteProduct = null;
            await LoadData();
        }
    }

    private void HandleSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        currentPage = 1;
        searchDebounceTimer?.Stop();
        searchDebounceTimer?.Start();
    }

    private void HandlePriceInput(ChangeEventArgs e)
    {
        if (decimal.TryParse(e.Value?.ToString(), out decimal newPrice))
        {
            maxPrice = newPrice;
            currentPage = 1;
            priceDebounceTimer?.Stop();
            priceDebounceTimer?.Start();
        }
    }
}