@page "/login"
@using BusinessObject.Contracts
@using BusinessObject.Services
@using Microsoft.AspNetCore.Components.Authorization
@using eStore.Helpers
@inject IJSRuntime js
@inject IJWTService JWTService
@inject IMemberService MemberService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

<h3>Login</h3>
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p style="color: red">@ErrorMessage</p>
}
<div>
    <label>
        Email:
        <input @bind="model.Email" />
    </label>
</div>
<div>
    <label>
        Password:
        <input type="password" @bind="model.Password" />
    </label>
</div>
<div>
    <button @onclick="HandleLogin">Submit</button>
<button @onclick="() => Console.WriteLine('B')">Submit</button>


</div>

@code {
    public class Model
    {
        public string Email { get; set; } = "nguyenanhthu@gmail.com";
        public string Password { get; set; } = "123456";
    }

    private Model model = new Model();
    private string ErrorMessage { get; set; } = string.Empty;

    private async Task HandleLogin()
    {
        if (string.IsNullOrWhiteSpace(model.Email) || string.IsNullOrWhiteSpace(model.Password))
        {
            ErrorMessage = "Please fill in all fields.";
            return;
        }

        try
        {
            var loginResult = await MemberService.Login(model.Email, model.Password);
            if (loginResult == null)
            {
                ErrorMessage = "Invalid email or password.";
                return;
            }

            var customAuthStateProvider = AuthStateProvider as CustomAuthStateProvider;
            if (customAuthStateProvider != null)
            {
                await customAuthStateProvider.UpdateAuthenticationState(new UserSession
                    {
                        Email = model.Email,
                        Role = "User"
                    });

                NavigationManager.NavigateTo("/");
            }
            else
            {
                ErrorMessage = "Authentication provider not properly configured.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "An error occurred during login. Please try again.";
            Console.WriteLine($"Login error: {ex.Message}");
        }
    }

    // If you need token handling logic, you can uncomment and fix this section:
    /*
    private string Token { get; set; }
    private bool ShouldSaveToken { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (ShouldSaveToken && !string.IsNullOrEmpty(Token))
        {
            ShouldSaveToken = false;
            await js.InvokeVoidAsync("localStorage.setItem", "authToken", Token);

            // Update authentication state if needed
            if (AuthStateProvider is CustomAuthStateProvider customAuthStateProvider)
            {
                await customAuthStateProvider.MarkUserAsAuthenticated(Token);
                }
            }
        }
        */
}