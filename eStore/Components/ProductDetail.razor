@page "/detail/{ProductId:int}"
@using System.Security.Claims
@using BusinessObject.Contracts
@using BusinessObject.Models
@using Microsoft.AspNetCore.Components.Authorization
@using static BusinessObject.Models.ProductDTO

@inject IProductService ProductService
@inject NavigationManager NavigationManager
@inject ICartService CartService
@inject IMapper Mapper
@inject SweetAlertService Swal;
@inject AuthenticationStateProvider AuthStateProvider
@layout CommonLayout

@rendermode InteractiveServer

<div class="container py-4">

    @if (product == null)
    {
        <div class="row justify-content-center">
            <div class="col-12 col-lg-10 text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Đang tải...</span>
                </div>
                <p class="mt-3">Đang tải dữ liệu sản phẩm...</p>
            </div>
        </div>
    }
    else
    {
        <div class="row mb-4 justify-content-center">
            <div class="col-12 col-lg-10">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="/">Trang chủ</a></li>
                        <li class="breadcrumb-item active" aria-current="page">@product.ProductName</li>
                    </ol>
                </nav>
            </div>
        </div>

        <div class="row justify-content-center">
            <div class="col-12 col-lg-10">
                <div class="card border-0 shadow-sm rounded-3">
                    <div class="card-body p-4 p-lg-5">
                        <h2 class="card-title fw-bold mb-4 text-center">@product.ProductName</h2>

                        <div class="mb-4 text-center">
                            <span class="badge bg-success fs-5 mb-2">@product.UnitPrice.ToString("N0")VND</span>
                        </div>

                        <hr>

                        <div class="row mb-4" style="width: 500px; margin: 0 auto">
                            <div class="col-md-6 mb-3">
                                <h6 class="text-uppercase text-muted small">Mã sản phẩm</h6>
                                <p class="fw-semibold">@product.ProductId</p>
                            </div>
                            <div class="col-md-6 mb-3">
                                <h6 class="text-uppercase text-muted small">Danh mục</h6>
                                <p class="fw-semibold">@product.CategoryName</p>
                            </div>
                            <div class="col-md-6 mb-3">
                                <h6 class="text-uppercase text-muted small">Trọng lượng</h6>
                                <p class="fw-semibold">@product.Weight</p>
                            </div>
                            <div class="col-md-6 mb-3">
                                <h6 class="text-uppercase text-muted small">Số lượng trong kho</h6>
                                <p class="fw-semibold">@product.UnitsInStock</p>
                            </div>
                        </div>

                        <hr>

                        <div class="mb-4">
                            <h6 class="text-uppercase text-muted small mb-3 text-center">Số lượng</h6>
                            <div class="d-flex flex-column align-items-center">
                                <div class="quantity-control mb-3">
                                    <button class="quantity-btn btn btn-lg btn-outline-primary fw-bold" type="button" @onclick="DecreaseQuantity">
                                        -
                                    </button>
                                    <input type="number" class="form-control form-control-lg text-center quantity-input" @bind="quantity" min="1" />
                                    <button class="quantity-btn btn btn-lg btn-outline-primary fw-bold" type="button" @onclick="IncreaseQuantity">
                                        +
                                    </button>
                                </div>

                                <div class="small @(product.UnitsInStock > 10 ? "text-success" : product.UnitsInStock > 0 ? "text-warning" : "text-danger")">
                                    @if (product.UnitsInStock > 10)
                                    {
                                        <i class="bi bi-check-circle-fill me-1"></i>
                                        <span>Còn hàng (@product.UnitsInStock sản phẩm)</span>
                                    }
                                    else if (product.UnitsInStock > 0)
                                    {
                                        <i class="bi bi-exclamation-triangle-fill me-1"></i>
                                        <span>Sắp hết hàng (Chỉ còn @product.UnitsInStock sản phẩm)</span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-x-circle-fill me-1"></i>
                                        <span>Hết hàng</span>
                                    }
                                </div>
                            </div>
                        </div>

                        <div class="d-grid gap-3 d-md-flex justify-content-center mt-4">
                            <button class="btn btn-primary btn-lg px-4 py-3" @onclick="AddToCart" disabled="@(product.UnitsInStock <= 0)">
                                <i class="bi bi-cart-plus me-2"></i>Thêm vào giỏ hàng
                            </button>
                            <button class="btn btn-success btn-lg px-4 py-3" @onclick="BuyNow" disabled="@(product.UnitsInStock <= 0)">
                                <i class="bi bi-lightning-fill me-2"></i>Mua ngay
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .quantity-control {
    display: flex;
    align-items: center;
    max-width: 180px;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    .quantity-btn {
    width: 50px;
    height: 50px;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #f8f9fa;
    border: none;
    font-size: 1.5rem;
    transition: all 0.2s ease;
    padding: 0;
    }

    .quantity-btn:hover {
    background-color: #e9ecef;
    }

    .quantity-input {
    width: 80px;
    height: 50px;
    border: none;
    border-left: 1px solid #dee2e6;
    border-right: 1px solid #dee2e6;
    border-radius: 0;
    font-size: 1.25rem;
    font-weight: bold;
    padding-left: 1px;
    padding-right: 1px;
    }

    .quantity-input:focus {
    box-shadow: none;
    outline: none;
    }


    .quantity-input::-webkit-outer-spin-button,
    .quantity-input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
    }

    .quantity-input[type=number] {
    -moz-appearance: textfield;
    }

    }
</style>

@code {
    [Parameter]
    public int ProductId { get; set; }

    [CascadingParameter]
    private Func<int, Task>? OnCartUpdated { get; set; }

    private ProductDetailsDto? product;
    private int quantity = 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            product = await ProductService.GetProductDetailsAsync(ProductId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading product: {ex.Message}");
        }
    }

    private void IncreaseQuantity()
    {
        if (product != null && quantity < product.UnitsInStock)
        {
            quantity++;
        }
    }

    private async Task DecreaseQuantity()
    {
        if (quantity > 1)
            quantity--;
    }

    private async Task AddToCart()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login", forceLoad: true);
            return;
        }

        var userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

        if (product != null && quantity <= product.UnitsInStock)
        {
            var cart = await CartService.GetCartAsync(userId);
            if (cart == null)
            {
                cart = new CartDTO
                    {
                        Id = userId,
                        Items = new List<CartItemDTO>()
                    };
                await CartService.UpdateCartAsync(cart);
            }

            var cartItem = cart.Items.FirstOrDefault(i => i.Id == product.ProductId);
            if (cartItem == null)
            {
                cartItem = new CartItemDTO
                    {
                        Id = product.ProductId,
                        Quantity = quantity,
                        Price = product.UnitPrice,
                        Discount = 20,
                        ProductName = product.ProductName,
                        Category = product.CategoryName,
                        UnitsInStock = product.UnitsInStock
                    };
                cart.Items.Add(cartItem);
            }
            else
            {
                cartItem.Quantity += quantity;
            }

            var updatedCart = await CartService.UpdateCartAsync(cart);
            if (updatedCart != null && OnCartUpdated != null)
            {
                await OnCartUpdated(updatedCart.Items.Count);
            }

            var result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Thành công",
                    Text = $"Bạn đã thêm {quantity} sản phẩm {product.ProductName} vào giỏ hàng!",
                    Icon = SweetAlertIcon.Success,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Giỏ hàng",
                    CancelButtonText = "Tiếp tục mua hàng"
                });

            if (result.IsConfirmed)
            {
                NavigationManager.NavigateTo("/cart");
            }

            else if (result.IsDismissed)
            {
                NavigationManager.NavigateTo("/");
            }
        }
        else
        {
            await Swal.FireAsync("Oops...", "Sản phẩm đã hết hàng!", "error");
        }
    }

    private async Task BuyNow()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        if (product != null && quantity <= product.UnitsInStock)
        {
            var userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

            var cart = await CartService.GetCartAsync(userId);
            if (cart == null)
            {
                cart = new CartDTO
                {
                    Id = userId,
                    Items = new List<CartItemDTO>()
                };
                await CartService.UpdateCartAsync(cart);
            }

            var cartItem = cart.Items.FirstOrDefault(i => i.Id == product.ProductId);
            if (cartItem == null)
            {
                cartItem = new CartItemDTO
                {
                    Id = product.ProductId,
                    Quantity = quantity,
                    Price = product.UnitPrice,
                    Discount = 20,
                    ProductName = product.ProductName,
                    Category = product.CategoryName,
                    UnitsInStock = product.UnitsInStock
                };
                cart.Items.Add(cartItem);
            }
            else
            {
                cartItem.Quantity += quantity;
            }

            var updatedCart = await CartService.UpdateCartAsync(cart);
            if (updatedCart != null && OnCartUpdated != null)
            {
                await OnCartUpdated(updatedCart.Items.Count);
            }

            NavigationManager.NavigateTo("/cart");
        }
        else
        {
            //logic không được mua
            await Swal.FireAsync("Oops...", "Sản phẩm đã hết hàng!", "error");
        }
    }
}