@using BlazorBootstrap
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using eStore.Helpers
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
<div class="page">
	<div class="sidebar">
		<NavMenu />
	</div>


	<main>

		<article class="content px-4">
			<AuthorizeView Roles="Admin">
				<Authorized>
					@Body
				</Authorized>
				<NotAuthorized>
					Bạn không có quyền xem trang này.
					<a href="/">Trở về</a>
				</NotAuthorized>
			</AuthorizeView>
		</article>
	</main>
	<div class="justify-content-end" id="navbarNav">
		<Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
			<Authorized>
				<Dropdown Color="DropdownColor.Secondary">
					<DropdownToggleButton>
						<a>
							<img src="https://static.vecteezy.com/system/resources/previews/019/896/008/original/male-user-avatar-icon-in-flat-design-style-person-signs-illustration-png.png" alt="User Avatar" class="rounded-circle" width="40" height="40">
						</a>
					</DropdownToggleButton>
					<DropdownMenu Position="DropdownMenuPosition.End">
						<DropdownItem><span class="dropdown-item-text">Hello, @context.User.Identity.Name</span></DropdownItem>
						<DropdownItem To="#" Type="DropdownItemType.Link"><a class="dropdown-item" href="#" @onclick="Logout">Logout</a></DropdownItem>
					</DropdownMenu>
				</Dropdown>
			</Authorized>
			<NotAuthorized>
				<li><a class="dropdown-item" href="/login">Login</a></li>
			</NotAuthorized>
		</Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
	</div>
</div>

<div id="blazor-error-ui">
	An unhandled error has occurred.
	<a href="" class="reload">Reload</a>
	<a class="dismiss">🗙</a>
</div>
@code {
	private async Task Logout()
	{
		if (AuthStateProvider is CustomAuthStateProvider customState)
		{
			await customState.UpdateAuthenticationState(null);
		}

		NavigationManager.NavigateTo("/login", forceLoad: true);
	}
	// protected override async Task OnParametersSetAsync()
	// {
	// 	var authState = await AuthStateProvider.GetAuthenticationStateAsync();
	// 	var user = authState.User;

	// 	if (!user.Identity.IsAuthenticated || user.FindFirst(c => c.Type == ClaimTypes.Role)?.Value == "Member")
	// 	{
	// 		NavigationManager.NavigateTo("/", forceLoad: true);
	// 		return;
	// 	}
	// }
}